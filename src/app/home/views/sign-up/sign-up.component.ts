import { Component } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Role } from 'src/app/core/models/Role/role.enum';
import { Etudiant } from 'src/app/core/models/etudiant/etudiant';
import { AuthenticationService } from 'src/app/core/services/authentication/authentication.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-sign-up',
  templateUrl: './sign-up.component.html',
  styleUrls: ['./sign-up.component.css']
})
export class SignUpComponent {

  registerForm = new FormGroup({
    nom: new FormControl('', [Validators.required, Validators.minLength(3)]),
    prenom: new FormControl('', [Validators.required, Validators.minLength(3)]),
    cin: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),
    image: new FormControl('', [Validators.required]),
    ecole: new FormControl('', [Validators.required, Validators.minLength(3)]),
    dateNaissance: new FormControl('', [Validators.required]),
    email: new FormControl('', [Validators.required, Validators.email]),
    password: new FormControl('', [Validators.required, Validators.minLength(6)])
  });

  constructor(private router: Router, private authenticationService: AuthenticationService) { }

  register() {
    const etudiant: Etudiant = {
      nom: this.registerForm.value.nom || '', // Default to empty string if null
      prenom: this.registerForm.value.prenom || '',
      cin: Number(this.registerForm.value.cin) || 0, // Adjust type conversion as needed
      image: this.registerForm.value.image || '',
      ecole: this.registerForm.value.ecole || '',
      dateNaissance: new Date(this.registerForm.value.dateNaissance || Date.now()), // Handle date conversion
      email: this.registerForm.value.email || '',
      password: this.registerForm.value.password || '',
      id: 0, // Assuming this is generated by the backend and not needed here
      role: Role.ETUDIANT // Assuming a default role; adjust as necessary
    };

    this.authenticationService.registerEtudiant(etudiant).subscribe(
      (response: any) => {
        Swal.fire({
          icon: 'success',
          title: 'Inscription réussie',
          text: 'Vous pouvez maintenant vous connecter',
          showConfirmButton: false,
          timer: 1500
        });
        this.router.navigate(['/signin']);
      },
      (error: any) => {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Une erreur est survenue lors de l\'inscription',
          footer: 'Veuillez réessayer'
        });
      }
    );
  }

}
